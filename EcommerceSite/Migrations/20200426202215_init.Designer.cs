// <auto-generated />
using System;
using EcommerceSite.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EcommerceSite.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200426202215_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EcommerceSite.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber")
                        .IsRequired();

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("EcommerceSite.Entities.CartItem", b =>
                {
                    b.Property<int>("FK_ProductId");

                    b.Property<string>("FK_CustomerId");

                    b.Property<int>("ProductQty");

                    b.HasKey("FK_ProductId", "FK_CustomerId");

                    b.HasIndex("FK_CustomerId");

                    b.ToTable("CartItem");
                });

            modelBuilder.Entity("EcommerceSite.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Men"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Women"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Kids"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Mobile & Tablet"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Electronics"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Home & Kitchen"
                        });
                });

            modelBuilder.Entity("EcommerceSite.Entities.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FK_ProductId");

                    b.Property<string>("ImgPath");

                    b.HasKey("Id");

                    b.HasIndex("FK_ProductId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("EcommerceSite.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FK_CustomerId");

                    b.Property<int>("FK_PaymentMethod");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnName("Order Date");

                    b.HasKey("Id");

                    b.HasIndex("FK_CustomerId");

                    b.HasIndex("FK_PaymentMethod");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("EcommerceSite.Entities.OrderProducts", b =>
                {
                    b.Property<int>("OrderID");

                    b.Property<int>("ProductID");

                    b.Property<int>("ProductQty");

                    b.HasKey("OrderID", "ProductID")
                        .HasName("Order_Products");

                    b.HasIndex("ProductID");

                    b.ToTable("OrderProducts");
                });

            modelBuilder.Entity("EcommerceSite.Entities.PaymentsType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Payments Type");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Direct Bank Transfer"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Paypal"
                        },
                        new
                        {
                            Id = 3,
                            Name = "MasterCard"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Visa"
                        },
                        new
                        {
                            Id = 5,
                            Name = "On Delivery"
                        });
                });

            modelBuilder.Entity("EcommerceSite.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("Discount");

                    b.Property<int>("FK_CategoryId");

                    b.Property<string>("FK_SellerId");

                    b.Property<string>("LongDisc")
                        .HasMaxLength(1000);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<float>("Price");

                    b.Property<string>("ShortDisc")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<int>("Stock");

                    b.Property<string>("Thumb")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("FK_CategoryId");

                    b.HasIndex("FK_SellerId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("EcommerceSite.Entities.ProductsPayments", b =>
                {
                    b.Property<int>("ProductID");

                    b.Property<int>("PaymentID");

                    b.HasKey("ProductID", "PaymentID");

                    b.HasIndex("PaymentID");

                    b.ToTable("ProductsPayments");
                });

            modelBuilder.Entity("EcommerceSite.Entities.ProductsTags", b =>
                {
                    b.Property<int>("ProductID");

                    b.Property<int>("TagtID");

                    b.HasKey("ProductID", "TagtID");

                    b.HasIndex("TagtID");

                    b.ToTable("ProductsTags");
                });

            modelBuilder.Entity("EcommerceSite.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("EcommerceSite.Entities.CartItem", b =>
                {
                    b.HasOne("EcommerceSite.Data.ApplicationUser", "Customer")
                        .WithMany("CartItems")
                        .HasForeignKey("FK_CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EcommerceSite.Entities.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("FK_ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EcommerceSite.Entities.Image", b =>
                {
                    b.HasOne("EcommerceSite.Entities.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("FK_ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EcommerceSite.Entities.Order", b =>
                {
                    b.HasOne("EcommerceSite.Data.ApplicationUser", "Customer")
                        .WithMany()
                        .HasForeignKey("FK_CustomerId");

                    b.HasOne("EcommerceSite.Entities.PaymentsType", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("FK_PaymentMethod")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EcommerceSite.Entities.OrderProducts", b =>
                {
                    b.HasOne("EcommerceSite.Entities.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EcommerceSite.Entities.Product", "Product")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EcommerceSite.Entities.Product", b =>
                {
                    b.HasOne("EcommerceSite.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("FK_CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EcommerceSite.Data.ApplicationUser", "Seller")
                        .WithMany()
                        .HasForeignKey("FK_SellerId");
                });

            modelBuilder.Entity("EcommerceSite.Entities.ProductsPayments", b =>
                {
                    b.HasOne("EcommerceSite.Entities.PaymentsType", "payyment")
                        .WithMany("ProductsPayments")
                        .HasForeignKey("PaymentID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EcommerceSite.Entities.Product", "Product")
                        .WithMany("ProductsPayments")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EcommerceSite.Entities.ProductsTags", b =>
                {
                    b.HasOne("EcommerceSite.Entities.Product", "Product")
                        .WithMany("ProductsTags")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EcommerceSite.Entities.Tag", "Tag")
                        .WithMany("ProductsTags")
                        .HasForeignKey("TagtID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EcommerceSite.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EcommerceSite.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EcommerceSite.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EcommerceSite.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
